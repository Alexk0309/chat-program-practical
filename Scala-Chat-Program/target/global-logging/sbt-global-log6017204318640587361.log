[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, Some(00c3a823-d7c5-4014-b064-9a1e66afcd1b), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"2","parents":[]},"eventTime":1670388932876,"message":"Compiling scala-chat-program","dataKind":"compile-task","data":{"target":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/ChatServer.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/Client.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/view/MainWindowController.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/Upnp.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/ClientApp.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/MyConfiguration.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/ChatClient.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[{"range":{"start":{"line":56,"character":4},"end":{"line":56,"character":5}},"severity":2,"source":"sbt","message":"match may not be exhaustive.\nIt would fail on the following inputs: FindTheServer, Joined(_), ListingResponse(_), StartJoin(_), start"}],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/Server.scala"},"buildTarget":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"2","parents":[]},"eventTime":1670388933915,"message":"Compiled scala-chat-program","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/Volumes/Alex's%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/#scala-chat-program/Compile"},"errors":0,"warnings":1,"time":1039}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"running (fork) com.hep88.ServerApp "})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"SLF4J: A number (1) of logging calls during the initialization phase have been intercepted and are"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"SLF4J: now being replayed. These are subject to the filtering rules of the underlying logging system."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"SLF4J: See also http://www.slf4j.org/codes.html#replay"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:09.741 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.event.slf4j.Slf4jLogger - Slf4jLogger started"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.076 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.remote.artery.ArteryTransport - Remoting started with transport [Artery tcp]; listening on address [akka://HelloSystem@192.168.1.103:60000] with UID [8796506792967324572]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.120 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Starting up, Akka version [2.6.17] ..."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.243 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Registered cluster JMX MBean [akka:type=Cluster]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.244 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Started up successfully"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.323 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.sbr.SplitBrainResolver - SBR started. Config: strategy [KeepMajority], stable-after [20 seconds], down-all-when-unstable [15 seconds], selfUniqueAddress [akka://HelloSystem@192.168.1.103:60000#8796506792967324572], selfDc [default]."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.362 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Node [akka://HelloSystem@192.168.1.103:60000] is JOINING itself (with roles [dc-default], version [0.0.0]) and forming new cluster"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.362 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - is the new leader among reachable nodes (more leaders may exist)"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.380 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Leader is moving node [akka://HelloSystem@192.168.1.103:60000] to [Up]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.399 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.sbr.SplitBrainResolver - This node is now the leader responsible for taking SBR decisions among the reachable nodes (more leaders may exist)."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.896 [HelloSystem-akka.actor.default-dispatcher-3] INFO com.hep88.Upnp$ - Starting Cling..."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:10.910 [HelloSystem-akka.actor.internal-dispatcher-2] DEBUG akka.cluster.typed.internal.receptionist.ClusterReceptionist - ClusterReceptionist [akka://HelloSystem@192.168.1.103:60000] - Actor was registered: [ServiceKey[com.hep88.ChatServer$Command](Server)] [akka://HelloSystem/user#0 @ 8796506792967324572]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.UpnpServiceImpl <init>"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: >>> Starting UPnP service..."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.UpnpServiceImpl <init>"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: Using configuration: org.fourthline.cling.DefaultUpnpServiceConfiguration"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.transport.RouterImpl <init>"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: Creating Router: org.fourthline.cling.transport.RouterImpl"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.transport.impl.MulticastReceiverImpl init"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: Creating wildcard socket (for receiving multicast datagrams) on port: 1900"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.transport.impl.MulticastReceiverImpl init"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: Joining multicast group: /239.255.255.250:1900 on network interface: en0"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.transport.impl.StreamServerImpl init"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: Created server (for receiving TCP streams) on: /192.168.1.103:55486"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.transport.impl.DatagramIOImpl init"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: Creating bound socket (for datagram input/output) on: /192.168.1.103"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"Dec 07, 2022 12:56:10 PM org.fourthline.cling.UpnpServiceImpl <init>"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":1,"message":"INFO: <<< UPnP service started successfully"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device available: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:11.408 [HelloSystem-akka.actor.internal-dispatcher-2] DEBUG akka.cluster.typed.internal.receptionist.ClusterReceptionist - ClusterReceptionist [akka://HelloSystem@192.168.1.103:60000] - Change from replicator: [Map(ServiceKey[com.hep88.ChatServer$Command](Server) -> Set(akka://HelloSystem/user#0 @ 8796506792967324572))], changes: [(Server,[akka://HelloSystem/user#0 @ 8796506792967324572])], tombstones []"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Justin Maggard Windows Media Connect compatible (MiniDLNA) 1"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, shutdown, [false,null])[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, shutdown, [true,null])[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:56.108 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Received InitJoin message from [Actor[akka://HelloSystem@192.168.1.103:55491/system/cluster/core/daemon/joinSeedNodeProcess-1#319263473]] to [akka://HelloSystem@192.168.1.103:60000]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:56.109 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Sending InitJoinAck message from node [akka://HelloSystem@192.168.1.103:60000] to [Actor[akka://HelloSystem@192.168.1.103:55491/system/cluster/core/daemon/joinSeedNodeProcess-1#319263473]] (version [2.6.17])"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:56.278 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Node [akka://HelloSystem@192.168.1.103:55491] is JOINING, roles [dc-default], version [0.0.0]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:56.284 [HelloSystem-akka.actor.internal-dispatcher-14] DEBUG akka.cluster.typed.internal.receptionist.ClusterReceptionist - ClusterReceptionist [akka://HelloSystem@192.168.1.103:60000] - Node added [UniqueAddress(akka://HelloSystem@192.168.1.103:55491,-5101885166268966052)]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:57.199 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Leader is moving node [akka://HelloSystem@192.168.1.103:55491] to [Up]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:57.204 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.cluster.sbr.SplitBrainResolver - This node is not the leader any more and not responsible for taking SBR decisions."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:56:58.221 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - is no longer leader"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:57:53.067 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.sbr.SplitBrainResolver - This node is now the leader responsible for taking SBR decisions among the reachable nodes (more leaders may exist)."})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:57:53.068 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Exiting confirmed [akka://HelloSystem@192.168.1.103:55491]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:57:53.266 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - is the new leader among reachable nodes (more leaders may exist)"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:57:53.271 [HelloSystem-akka.actor.default-dispatcher-6] INFO akka.cluster.Cluster - Cluster Node [akka://HelloSystem@192.168.1.103:60000] - Leader is removing confirmed Exiting node [akka://HelloSystem@192.168.1.103:55491]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:57:53.274 [HelloSystem-akka.actor.internal-dispatcher-2] DEBUG akka.cluster.typed.internal.receptionist.ClusterReceptionist - ClusterReceptionist [akka://HelloSystem@192.168.1.103:60000] - Leader node observed removed node [UniqueAddress(akka://HelloSystem@192.168.1.103:55491,-5101885166268966052)]"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"12:57:55.169 [HelloSystem-akka.actor.default-dispatcher-3] INFO akka.remote.artery.Association - Association to [akka://HelloSystem@192.168.1.103:55491] having UID [-5101885166268966052] has been stopped. All messages to this UID will be delivered to dead letters. Reason: ActorSystem terminated"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device available: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Volumes/Alex%27s%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/ChatClient.scala","languageId":"scala","version":1,"text":"package com.hep88\nimport akka.actor.typed.{ActorRef, PostStop, ActorSystem, Behavior}\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.{Receptionist,ServiceKey}\nimport akka.cluster.typed._\nimport akka.{ actor => classic }\nimport akka.actor.typed.scaladsl.adapter._\nimport scalafx.collections.ObservableHashSet\nimport scalafx.application.Platform\nimport akka.cluster.ClusterEvent.ReachabilityEvent\nimport akka.cluster.ClusterEvent.ReachableMember\nimport akka.cluster.ClusterEvent.UnreachableMember\nimport akka.cluster.ClusterEvent.MemberEvent\nimport akka.actor.Address\nimport com.hep88.Upnp._\n\nobject ChatClient {\n\n  // protocol chat client server\n  sealed trait Command\n  case class Joined(list: Iterable[User]) extends Command\n  case class MemberList (list: Iterable[User]) extends Command\n\n  // Protocol for client to client\n  case class Message(value: String, from: ActorRef[ChatClient.Command]) extends Command\n\n  // Protocol chat client Main App\n  case class StartJoin(name : String) extends Command\n  case class SendMessageL(target: ActorRef[ChatClient.Command], content: String) extends Command\n\n  // Start signal for client actor\n  case object start extends Command\n  // Server discovery protocol\n  final case object FindTheServer extends Command\n  private case class ListingResponse(listing: Receptionist.Listing) extends Command\n\n  // data property for actor client\n  val members = new ObservableHashSet[User]()\n  var remoteOpt:Option[ActorRef[ChatServer.Command]] = None\n  var defaultBehavior: Option[Behavior[ChatClient.Command]] = None\n  val unreachables = new ObservableHashSet[Address]()\n  var nameOpt: Option[String] = None\n\n  unreachables.onChange { (ns, _) =>\n    Platform.runLater {\n      Client.control.updateList(members.toList.filter(y => !unreachables.exists(x => x == y.ref.path.address)))\n    }\n  }\n\n  members.onChange { (ns, _) =>\n    Platform.runLater {\n      Client.control.updateList(ns.toList.filter(y => !unreachables.exists(x => x == y.ref.path.address)))\n    }\n  }\n\n  def messageStarted(): Behavior[ChatClient.Command] = Behaviors.receive[ChatClient.Command] { (context, message) =>\n    message match {\n      case SendMessageL(target, content) =>\n        target ! Message(content, context.self)\n        Behaviors.same\n      case Message(msg, from) =>\n        Platform.runLater {\n          Client.control.addText(msg)\n        }\n        Behaviors.same\n      case MemberList(list: Iterable[User]) =>\n        members.clear()\n        members ++= list\n        Behaviors.same\n    }\n  }.receiveSignal {\n    case (context, PostStop) =>\n      for (name <- nameOpt;\n           remote <- remoteOpt) {\n        remote ! ChatServer.Leave(name, context.self)\n      }\n      defaultBehavior.getOrElse(Behaviors.same)\n  }\n\n  def apply(): Behavior[ChatClient.Command] =\n    Behaviors.setup { context =>\n      val upnpRef = context.spawn(Upnp(), Upnp.name)\n      upnpRef ! AddPortMapping(20000)\n\n\n      // (1) a ServiceKey is a unique identifier for this actor\n\n\n      // (2) create an ActorRef that can be thought of as a Receptionist\n      // Listing “adapter.” this will be used in the next line of code.\n      // the ClientHello.ListingResponse(listing) part of the code tells the\n      // Receptionist how to get back in touch with us after we contact\n      // it in Step 4 below.\n      // also, this line of code is long, so i wrapped it onto two lines\n      val listingAdapter: ActorRef[Receptionist.Listing] =\n      context.messageAdapter { listing =>\n        println(s\"listingAdapter:listing: ${listing.toString}\")\n        ChatClient.ListingResponse(listing)\n      }\n      //(3) send a message to the Receptionist saying that we want\n      // to subscribe to events related to ServerHello.ServerKey, which\n      // represents the ClientHello actor.\n      context.system.receptionist ! Receptionist.Subscribe(ChatServer.ServerKey, listingAdapter)\n\n      defaultBehavior = Option(Behaviors.receiveMessage { message =>\n        message match {\n          case ChatClient.start =>\n\n            Behaviors.same\n          // (4) send a Find message to the Receptionist, saying\n          // that we want to find any/all listings related to\n          // Mouth.MouthKey, i.e., the Mouth actor.\n          case FindTheServer =>\n            println(s\"Clinet Hello: got a FindTheServer message\")\n            context.system.receptionist !\n              Receptionist.Find(ChatServer.ServerKey, listingAdapter)\n\n            Behaviors.same\n          // (5) after Step 4, the Receptionist sends us this\n          // ListingResponse message. the `listings` variable is\n          // a Set of ActorRef of type ServerHello.Command, which\n          // you can interpret as “a set of ServerHello ActorRefs.” for\n          // this example i know that there will be at most one\n          // ServerHello actor, but in other cases there may be more\n          // than one actor in this set.\n          case ListingResponse(ChatServer.ServerKey.Listing(listings)) =>\n            val xs: Set[ActorRef[ChatServer.Command]] = listings\n            for (x <- xs) {\n              remoteOpt = Some(x)\n            }\n            Behaviors.same\n\n          case Joined(list) =>\n            Platform.runLater {\n              Client.control.displayStatus(\"joined\")\n            }\n            members.clear()\n            members ++= list\n            messageStarted()\n            Behaviors.same\n\n          case MemberList(list) =>\n            members.clear()\n            members ++= list\n            Behaviors.same\n\n          case StartJoin(name) =>\n            nameOpt = Option(name)\n            import com.hep88.ChatServer._\n            for (remote <- remoteOpt) {\n              remote ! JoinChat(name , context.self)\n            }\n            Behaviors.same\n\n        }\n      })\n      defaultBehavior.get\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Volumes/Alex%27s%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/ChatServer.scala","languageId":"scala","version":1,"text":"package com.hep88\r\nimport akka.actor.typed.ActorRef\r\nimport akka.actor.typed.ActorSystem\r\nimport akka.actor.typed.Behavior\r\nimport akka.actor.typed.scaladsl.Behaviors\r\nimport akka.actor.typed.receptionist.{Receptionist, ServiceKey}\r\nimport com.hep88.Upnp.AddPortMapping\r\nimport scalafx.collections.ObservableHashSet\r\n\r\ncase class User (name: String , ref:ActorRef[ChatClient.Command])\r\n\r\nobject ChatServer {\r\n  // Protocol\r\n  sealed trait Command\r\n  case class JoinChat(name:String, ref:ActorRef[ChatClient.Command]) extends Command\r\n  case class Leave(name: String, from: ActorRef[ChatClient.Command]) extends Command\r\n\r\n  // Service Key\r\n  val ServerKey: ServiceKey[ChatServer.Command] = ServiceKey(\"Server\")\r\n\r\n  //Server state\r\n  val members = new ObservableHashSet[User]()\r\n\r\n  members.onChange((newSet, c) => {\r\n    import com.hep88.ChatClient._\r\n    val newList = MemberList(newSet.toList)\r\n    for (user <- newSet) {\r\n      user.ref ! newList\r\n    }\r\n  })\r\n\r\n  def apply(): Behavior[ChatServer.Command] =\r\n    Behaviors.setup { context =>\r\n      val upnpRef = context.spawn(Upnp(), Upnp.name)\r\n      upnpRef ! AddPortMapping(20000)\r\n\r\n      context.system.receptionist ! Receptionist.Register(ServerKey, context.self)\r\n\r\n      Behaviors.receiveMessage { message =>\r\n        message match {\r\n          case JoinChat(name, ref) =>\r\n            import com.hep88.ChatClient._\r\n            ChatServer.members += User(name, ref)\r\n            ref ! Joined(ChatServer.members.toList)\r\n            Behaviors.same\r\n\r\n          case Leave(name, from) =>\r\n            members -= User(name, from)\r\n            Behaviors.same\r\n        }\r\n      }\r\n    }\r\n}\r\n\r\nobject ServerApp extends App { // Create server skeleton\r\n  val greeterMain: ActorSystem[ChatServer.Command] = ActorSystem(ChatServer(), \"HelloSystem\")\r\n\r\n}\r\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Volumes/Alex%27s%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/com/hep88/ClientApp.scala","languageId":"scala","version":1,"text":"package com.hep88\nimport akka.cluster.typed._\nimport akka.{ actor => classic }\nimport akka.actor.typed.{ActorRef, ActorSystem}\nimport akka.actor.typed.scaladsl.adapter._\nimport com.typesafe.config.ConfigFactory\nimport scalafx.application.JFXApp\nimport scalafx.application.JFXApp.PrimaryStage\nimport javafx.{scene => jfxs}\nimport scalafx.scene.Scene\nimport scalafxml.core.{FXMLLoader, NoDependencyResolver}\nimport scalafx.Includes._\nimport scala.concurrent.Future\nimport scala.concurrent.duration._\n\nobject Client extends JFXApp {\n  implicit val ec: scala.concurrent.ExecutionContext = scala.concurrent.ExecutionContext.global\n  val greeterMain: ActorSystem[ChatClient.Command] = ActorSystem(ChatClient(), \"HelloSystem\")\n  // Starting the finding of chat server actor\n  greeterMain ! ChatClient.start\n\n  val loader = new FXMLLoader(null, NoDependencyResolver)\n  loader.load(getClass.getResourceAsStream(\"view/MainWindow.fxml\"))\n  val border: scalafx.scene.layout.BorderPane = loader.getRoot[javafx.scene.layout.BorderPane]()\n  val control = loader.getController[com.hep88.view.MainWindowController#Controller]()\n  control.chatClientRef = Option(greeterMain)\n  val cssResource = getClass.getResource(\"view/DarkTheme.css\")\n  stage = new PrimaryStage() {\n    scene = new Scene(){\n      root = border\n      stylesheets = List(cssResource.toExternalForm)\n    }\n  }\n\n  stage.onCloseRequest = handle({\n    greeterMain.terminate\n  })\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Volumes/Alex%27s%20SSD/Sunway/Semester%207/NET3204%20Distributed%20System/Practical%2010/Scala-Chat-Program/src/main/scala/Client.scala","languageId":"scala","version":1,"text":"import akka.actor.typed.ActorRef\nimport akka.actor.typed.ActorSystem\nimport akka.actor.typed.Behavior\nimport akka.actor.typed.scaladsl.Behaviors\nimport akka.actor.typed.receptionist.{Receptionist,ServiceKey}\nimport com.hep88.Upnp\nimport com.hep88.Upnp.AddPortMapping\n\nobject ClientHello {\n  sealed trait Command\n  case object start extends Command\n  case class SystemMessage(value: String) extends Command\n  case class Message(value: String, from: ActorRef[ServerHello.Command]) extends Command\n  final case object FindTheServer extends Command\n  private case class ListingResponse(listing: Receptionist.Listing) extends Command\n\n  def apply(): Behavior[ClientHello.Command] =\n    Behaviors.setup { context =>\n      val upnpRef = context.spawn(Upnp(), Upnp.name)\n      upnpRef ! AddPortMapping(20000)\n\n      var counter = 0\n      // (1) a ServiceKey is a unique identifier for this actor\n      var remoteOpt:Option[ActorRef[ServerHello.Command]] = None\n\n      // (2) create an ActorRef that can be thought of as a Receptionist\n      // Listing “adapter.” this will be used in the next line of code.\n      // the ClientHello.ListingResponse(listing) part of the code tells the\n      // Receptionist how to get back in touch with us after we contact\n      // it in Step 4 below.\n      // also, this line of code is long, so i wrapped it onto two lines\n      val listingAdapter: ActorRef[Receptionist.Listing] =\n      context.messageAdapter { listing =>\n        println(s\"listingAdapter:listing: ${listing.toString}\")\n        ClientHello.ListingResponse(listing)\n      }\n      //(3) send a message to the Receptionist saying that we want\n      // to subscribe to events related to ServerHello.ServerKey, which\n      // represents the ClientHello actor.\n      context.system.receptionist ! Receptionist.Subscribe(ServerHello.ServerKey, listingAdapter)\n\n      Behaviors.receiveMessage { message =>\n        message match {\n          case ClientHello.start =>\n            context.self ! FindTheServer\n            for (remote <- remoteOpt){\n              remote ! ServerHello.Message(\"i am fine\", context.self)\n            }\n            Behaviors.same\n          // (4) send a Find message to the Receptionist, saying\n          // that we want to find any/all listings related to\n          // Mouth.MouthKey, i.e., the Mouth actor.\n          case FindTheServer =>\n            println(s\"Clinet Hello: got a FindTheServer message\")\n            context.system.receptionist !\n              Receptionist.Find(ServerHello.ServerKey, listingAdapter)\n\n            Behaviors.same\n          // (5) after Step 4, the Receptionist sends us this\n          // ListingResponse message. the `listings` variable is\n          // a Set of ActorRef of type ServerHello.Command, which\n          // you can interpret as “a set of ServerHello ActorRefs.” for\n          // this example i know that there will be at most one\n          // ServerHello actor, but in other cases there may be more\n          // than one actor in this set.\n          case ListingResponse(ServerHello.ServerKey.Listing(listings)) =>\n            val xs: Set[ActorRef[ServerHello.Command]] = listings\n            for (x <- xs) {\n              remoteOpt = Some(x)\n            }\n            Behaviors.same\n          case ClientHello.Message(value, from) =>\n            println(s\"receive message: ${value}\")\n            if (counter < 5) {\n              from ! ServerHello.Message(\"Hello back to you\", context.self)\n              counter += 1\n            }\n            Behaviors.same\n          case ClientHello.SystemMessage(value) =>\n            for (remote <- remoteOpt){\n              remote ! ServerHello.Message(value, context.self)\n            }\n            Behaviors.same\n        }\n      }\n    }\n}\n\nobject Client extends App {\n  val greeterMain: ActorSystem[ClientHello.Command] = ActorSystem(ClientHello(), \"HelloSystem\")\n  var text = scala.io.StdIn.readLine(\"command=\")\n  while (text != \"end\"){\n    greeterMain ! ClientHello.SystemMessage(text)\n    text = scala.io.StdIn.readLine(\"command=\")\n  }\n  greeterMain.terminate()\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device removed: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Discovery started: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device available: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"Remote device updated: Realtek Semiconductor IGD 1.00"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, shutdown, [true,null])[0m
[0m[[0m[0minfo[0m] [0m[0mshutting down sbt server[0m
